{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","myStyle","color","mode","backgroundColor","border","className","style","id","type","Navbar","to","title","about","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","heading","value","onChange","event","target","rows","disabled","trim","length","toUpperCase","toLowerCase","temp","split","i","charAt","substr","join","str","flag","substring","navigator","clipboard","writeText","document","getSelection","removeAllRanges","showAlert","filter","element","Alert","word","height","alert","class","message","defaultProps","App","setMode","setAlert","setTimeout","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.44b14651.chunk.js","sourcesContent":["// import React, { useState } from 'react'\r\n\r\nexport default function About(props) {\r\n\r\n    // const [myStyle, setmyStyle] = useState({\r\n    //     color: 'black',\r\n    //     backgroundColor: 'white'\r\n    // });\r\n\r\n    let myStyle = {\r\n        color: props.mode === 'light' ? 'black' : 'white',\r\n        backgroundColor: props.mode === 'light' ? 'white' : 'rgb(1 14 33 / 83%)',\r\n        border: '2px solid white',\r\n    };\r\n\r\n    // const [btnText, setbtnText] = useState(\"Enable Dark Mode\");\r\n\r\n    // const toggleMode = () => {\r\n    //     if (myStyle.color === 'white') {\r\n    //         setmyStyle({\r\n    //             color: 'black',\r\n    //             backgroundColor: 'white',\r\n    //         })\r\n    //         setbtnText(\"Enable Dark Mode\");\r\n    //     }\r\n\r\n    //     else {\r\n    //         setmyStyle({\r\n    //             color: 'white',\r\n    //             backgroundColor: 'black',\r\n    //             border: '2px solid red'\r\n    //         })\r\n    //         setbtnText(\"Enable dark Mode\");\r\n    //     }\r\n    // }\r\n\r\n\r\n    return (\r\n        <div className=\"container my-3\" style={{color: props.mode ==='light' ? 'black':'white'}}>\r\n            <div className=\"accordion my-3\" id=\"accordionExample\" >\r\n                <h1 className=\"my-3\">About Us</h1>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\" >\r\n                        <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\"\r\n                            style={myStyle}>\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\"\r\n                        style={myStyle}>\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\" style={myStyle}>\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* <div className=\"container my-3\">\r\n                <button onClick={toggleMode} className=\"btn btn-primary\">{btnText}</button>\r\n            </div> */}\r\n\r\n\r\n        </div >\r\n    )\r\n}\r\n\r\n\r\n// style={\r\n//     props.mode === \"dark\" ? {\r\n//         color: 'white',\r\n//         backgroundColor: 'black',\r\n//         border: '2px solid red'\r\n//     } : {\r\n//         color: 'black',\r\n//         backgroundColor: 'white'\r\n//     }\r\n// }>","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode} shadow`}>\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n                {/* <a className=\"navbar-brand\" href=\"#\">{props.title}</a> */}\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                            {/* <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a> */}\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/About\">{props.about}</Link>\r\n                        </li>\r\n\r\n                    </ul>\r\n\r\n                    <div className={`form-check form-switch mx-3 text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    About: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: \"Title\",\r\n    About: \"Enter-about\"\r\n}\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState(\"\");\r\n\r\n    const handleUpClick = () => {\r\n        // let temp = text.toUpperCase();\r\n        setText(text.toUpperCase());\r\n    }\r\n\r\n    const handleDownClick = () => {\r\n        // let temp = text.toLowerCase();\r\n        setText(text.toLowerCase());\r\n    }\r\n\r\n    const handleReset = () => {\r\n        setText(\"\");\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"onchange\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const CopyToClipboard = () => {\r\n        // var copyText = document.getElementById(\"myInput\");\r\n        // copyText.select();\r\n        // navigator.clipboard.writeText(copyText.value);\r\n\r\n        navigator.clipboard.writeText(text);\r\n        document.getSelection().removeAllRanges();\r\n        props.showAlert(\"success\", \"Text copied to clipboard.\");\r\n    }\r\n\r\n    const CapitalizeCase = () => {\r\n\r\n        let temp = text.split(' ');\r\n        for (let i = 0; i < temp.length; i++) {\r\n            temp[i] = temp[i].charAt(0).toUpperCase() + temp[i].substr(1);\r\n        }\r\n        setText(temp.join(' '));\r\n    }\r\n\r\n    const handleTrim = () => {\r\n\r\n        let temp = text.split(' ');\r\n        let str = \"\";\r\n        for (let i = 0; i < temp.length; i++) {\r\n            if (temp[i] !== '')\r\n                str += temp[i] + \" \";\r\n        }\r\n        setText(str);\r\n    }\r\n\r\n    const handleFirstCap = () => {\r\n\r\n        let temp = text.split(' ');\r\n        let flag = 0;\r\n        temp[0] = temp[0].charAt(0).toUpperCase() + temp[0].substr(1);\r\n\r\n        for (let i = 0; i < temp.length; i++) {\r\n            if (flag === 1) {\r\n                temp[i] = temp[i].charAt(0).toUpperCase() + temp[i].substring(1);\r\n                flag = 0;\r\n            }\r\n\r\n            if (temp[i].charAt(temp[i].length - 1) === '.')\r\n                flag = 1;\r\n        }\r\n        setText(temp.join(' '));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container my-4\" style={{ color: props.mode === 'light' ? 'black' : 'white' }}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" id=\"myBox\" style={{\r\n                        backgroundColor: props.mode === 'light' ? 'white' : '#436495',\r\n                        color: props.mode === 'light' ? 'black' : 'white'\r\n                    }} value={text} onChange={handleOnChange} rows=\"8\"></textarea>\r\n                </div>\r\n\r\n                <button disabled={text.trim().length === 0} className=\"btn btn-primary my-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button disabled={text.trim().length === 0} className=\"btn btn-primary mx-1\" my-1 onClick={handleDownClick}>Convert to Lowercase</button>\r\n                <button disabled={text.trim().length === 0} className=\"btn btn-primary my-1\" onClick={CapitalizeCase}>Capitalize Case</button>\r\n                <button disabled={text.trim().length === 0} className=\"btn btn-primary mx-1 my-1\" onClick={handleTrim}>Remove extra space</button>\r\n                <button disabled={text.trim().length === 0} className=\"btn btn-primary my-1\" onClick={handleFirstCap}>Sentence</button>\r\n                <button disabled={text.trim().length === 0} className=\"btn btn-primary mx-1 my-1\" onClick={CopyToClipboard}>Copy to clipboard</button>\r\n                <button disabled={text.trim().length === 0} className=\"btn btn-danger my-1\" onClick={handleReset}>Clear Text</button>\r\n            </div>\r\n\r\n            <div className=\"container my-4\" style={{ color: props.mode === 'light' ? 'black' : 'white' }}>\r\n                <h3>Your text summary :</h3>\r\n                <p>{text.split(\" \").filter((element) => { return element.length !== 0 }).length} words and {text.trim().length} characters</p>\r\n                <p>{0.008 * text.split(\" \").filter((element) => { return element.length !== 0 }).length} word count</p>\r\n\r\n                <h3>Preview:</h3>\r\n                <p>{text.trim().length !== 0 ? text : 'Nothing to preview'}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nTextForm.propTypes = {\r\n    heading: PropTypes.string\r\n}\r\n\r\nTextForm.defaultProps = {\r\n    heading: \"Enter heading\"\r\n}","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n\r\n    const capitalize = (word) => {\r\n        return word.charAt(0).toUpperCase() + word.substr(1);\r\n    }\r\n\r\n    return (\r\n        <div style={{height:'45px'}}>\r\n            {props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}!</strong> {props.alert.message}\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nimport React, { useState } from 'react'\n\nimport {\n  BrowserRouter as Router,\n  Route,\n  Routes,\n} from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = 'rgb(48 72 109)';\n      showAlert(\"success\", \"Dark Mode enabled.\");\n      // document.title = \"TextUtils - Dark mode\";\n    }\n    else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"success\", \"Light Mode enabled.\");\n      // document.title = \"TextUtils - Light mode\";\n    };\n  }\n\n  const [alert, setAlert] = useState(null);\n\n  let showAlert = (type, message) => {\n    setAlert({\n      message: message,\n      type: type\n    });\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  return (\n    // JSX fragments <> .... </>\n    <>\n      <Router>\n        <Navbar title=\"TextUtils\" about=\"About\" mode={mode} toggleMode={toggleMode} />\n        {/* <Navbar /> */}\n        <Alert alert={alert} />\n\n        <Routes>\n          <Route exact path=\"/\" element={<TextForm heading=\"Enter your Text\" mode={mode} showAlert={showAlert} />}>\n          </Route>\n          {/* <TextForm heading=\"Enter your Text\" mode={mode} showAlert={showAlert} /> */}\n\n          <Route exact path=\"/About\" element={<About mode={mode} />}>\n          </Route>\n\n        </Routes>\n      </Router>\n    </>\n\n  );\n}\n\nexport default App;\n\n\n\n/*\n\n1. JSX is is simply a syntax extension of JavaScript. It allows us to directly write HTML\n   in React (within JavaScript code)\n    class changes to className.(as class is reserved keyword in JS)\n    for to htmlFor (as for is reserved keyword in JS)\n    tabindex to tabIndex (as tabindex is reserved keyword in JS)\n\n2. if we want to use js variable in JSX then we need to use {var_name}.\n3. Babel compiles the JSX down to React.createElement() calls.\n4. JSON and XML is used for data transfer between web servers.\n\n5. In react there are two types of components ->\n    function based\n    class based\n\n6. javascript versions are named as-->\n   ES1, ES2, ES3, ES4, ES5, ES6, ES7.\n\n7. we can return only one element in JSX.\n\n\n8. In JSX, style(CSS) is set using js objects.\n\n9. In react-router use exact keyword as react do partial matching.\n10. CLS - cumulative layout shift.\n11. document.getSelection().removeAllRanges(); (Textform -> de-highlight the text once copied).\n */","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}